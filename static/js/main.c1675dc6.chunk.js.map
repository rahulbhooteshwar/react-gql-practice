{"version":3,"sources":["Components/Posts.js","graphql/queries.js","Components/Loader.js","Components/Pagination.js","graphql/subscriptions.js","pages/Home.js","firebase.js","context/AuthContext.js","Components/Search.js","Components/Navbar.js","Components/forms/AuthForm.js","pages/auth/Register.js","graphql/mutations.js","pages/auth/Login.js","pages/auth/CompleteRegistration.js","pages/auth/ForgotPassword.js","Components/LoadingWithRedirect.js","Components/PrivateRoute.js","Components/forms/ProfileForm.js","Components/ImageManager.js","util/http.js","pages/Profile.js","pages/UpdatePassword.js","pages/UserPosts.js","pages/Dashboard.js","Components/PublicRoute.js","Components/UserCard.js","pages/Users.js","pages/SingleUser.js","Components/forms/CreateUpdatePostForm.js","pages/CreatePost.js","pages/ViewPost.js","pages/EditPost.js","pages/SearchResults.js","App.js","index.js","Components/Loader.module.css","graphql/fragments.js"],"names":["Posts","posts","showAuthor","colSize","deletePostHandler","editable","className","map","post","key","_id","style","height","to","process","src","image","url","alt","width","title","postedBy","username","name","onClick","gql","require","USER_INFO","POST_DATA","GET_POSTS_QUERY","TOTAL_POSTS","TOTAL_USER_POSTS","GET_CURRENT_USER_POSTS_QUERY","SINGLE_POST","SEARCH_POSTS","PROFILE_QUERY","ALL_USERS_QUERY","PUBLIC_PROFILE_QUERY","Loader","full","background","classes","loaderContainer","yellow","red","blue","violet","Pagination","page","pageSize","setPage","total","controls","Array","Math","ceil","fill","lowerLimit","upperLimit","length","disabled","_control","index","POST_ADDED","Home","useState","useSubscription","onSubscriptionData","client","cache","subscriptionData","data","refetchTotalPosts","refetchPosts","variables","useQuery","totalPostsQueryData","refetch","error","loading","useEffect","toast","message","totalPosts","allPosts","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","appId","measurementId","analytics","auth","googleAuthProvider","GoogleAuthProvider","firebaseReducer","state","action","type","user","payload","initialState","AuthContext","createContext","AuthProvider","children","setLoading","useReducer","dispatch","unsubscribe","onAuthStateChanged","a","getIdTokenResult","idTokenResult","email","token","value","Provider","Search","keyword","setKeyword","history","useHistory","onSubmit","e","preventDefault","push","onChange","target","placeholder","aria-label","Navbar","useContext","Fragment","data-toggle","data-target","aria-controls","aria-expanded","id","activeClassName","signOut","AuthForm","handleSubmit","setEmail","password","setPassword","showPassword","submitLabel","hideEmail","htmlFor","Register","done","setDone","config","handleCodeInApp","sendSignInLinkToEmail","success","window","localStorage","setItem","role","USER_CREATE","PROFILE_UPDATE","POST_CREATE","UPDATE_POST","DELETE_POST","Login","useMutation","createUser","signInWithEmailAndPassword","loginWithGoogle","signInWithPopup","CompleteRegistration","getItem","signInWithEmailLink","location","href","emailVerified","removeItem","currentUser","updatePassword","console","log","ForgotPassword","sendPasswordResetEmail","LoadingWithRedirect","countFrom","path","count","setCount","setTimeout","Date","PrivateRoute","rest","ProfileForm","profile","setProfile","profileLoading","about","rows","ImageManager","images","processingImage","resizeAndUploadHandler","deleteImageHandler","hidden","accept","public_id","cursor","includes","useAuthHttp","axios","create","baseURL","headers","Profile","http","setProcessingImage","profileLoadError","refetchQueries","query","updateProfile","useMemo","modified","omitDeep","input","filteredImages","filter","info","event","fileInput","files","Resizer","imageFileResizer","output","updatedImages","UpdatePassword","UserPosts","totalPostsByUserQueryData","update","reset","deletePost","totalPostsByUser","postsByCurrentUser","Dashboard","exact","PublicRoute","UserCard","defaultImage","firstImage","Users","allUsers","SingleUser","useParams","publicProfile","CreateUpdatePostForm","content","setTitle","setContent","setImage","FileResizer","CreatePost","createPost","ViewPost","singlePost","EditPost","submitting","setSubmitting","updatePost","SearchResults","searchPosts","App","wsLink","WebSocketLink","uri","options","reconnect","connectionParams","authtoken","httpLink","createHttpLink","authLink","setContext","_","link","split","definition","getMainDefinition","kind","operation","concat","ApolloClient","InMemoryCache","ApolloProvider","ReactDOM","render","StrictMode","basename","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c1675dc6.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nconst Posts = ({ posts, showAuthor = true, colSize = 3, deletePostHandler, editable = false }) => {\n  return <div className=\"row\">\n\n    {\n      posts.map((post) => {\n        return <div className={`col-md-${colSize} p-2`} key={`post-${post._id}`}>\n          <div className=\"card p-2\" style={{ height: '100%' }}>\n            <div className=\"card-body\">\n              <Link to={process.env.PUBLIC_URL + `/posts/${post._id}`}>\n                <img className=\"img-card-top\" src={post.image.url} alt=\"\" style={{ height: '100px', width: '300px' }} />\n                <h5 className=\"card-title\">\n                  {post.title}\n                </h5>\n              </Link>\n              <div className=\"card-text\">\n                {/* {post.content} */}\n                {\n                  showAuthor\n                    ? <div>\n\n                      <Link className=\"text-secondary strong\" to={process.env.PUBLIC_URL + `/users/${post.postedBy.username}`}>\n                        Author: {post.postedBy.name ? post.postedBy.name : post.postedBy.username}\n                      </Link>\n                    </div>\n                    : ''\n                }\n              </div>\n              <div>\n\n                {\n                  deletePostHandler\n                    ? <button onClick={() => deletePostHandler(post._id)} className=\"float-left btn btn-raised btn-danger\">Delete</button>\n                    : ''\n                }\n                {\n                  editable\n                    ? <Link to={process.env.PUBLIC_URL + `/edit-post/${post._id}`} className=\"float-right btn btn-raised btn-info\">Edit</Link>\n                    : ''\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      })\n    }\n  </div>\n}\n\nexport default Posts\n","const { gql } = require(\"@apollo/client\");\nconst { USER_INFO, POST_DATA } = require(\"./fragments\");\n\nexport const GET_POSTS_QUERY = gql`\nquery allPosts($page: Int, $pageSize: Int) {\n  allPosts(page: $page, pageSize: $pageSize) {\n   ...postData\n  }\n}\n${POST_DATA}\n`;\nexport const TOTAL_POSTS = gql`\nquery {\n  totalPosts\n}\n`\nexport const TOTAL_USER_POSTS = gql`\nquery {\n  totalPostsByUser\n}\n`\nexport const GET_CURRENT_USER_POSTS_QUERY = gql`\nquery postsByCurrentUser($page: Int, $pageSize: Int){\n  postsByCurrentUser(page: $page, pageSize: $pageSize) {\n    ...postData\n  }\n}\n${POST_DATA}\n`;\n\nexport const SINGLE_POST = gql`\nquery singlePost($_id: String!){\n  singlePost(_id: $_id) {\n    ...postData\n  }\n}\n${POST_DATA}\n`;\n\nexport const SEARCH_POSTS = gql`\nquery searchPosts($keyword: String!){\n  searchPosts(keyword:$keyword) {\n    ...postData\n  }\n}\n${POST_DATA}\n`;\nexport const PROFILE_QUERY = gql`\nquery {\n profile {\n   # using GQL fragment instead of directly specifying fields\n   ...userInfo\n  }\n}\n  ${USER_INFO}\n`\n\nexport const ALL_USERS_QUERY = gql`\nquery {\n  allUsers {\n    _id\n    username\n    about\n    images {\n      url\n    }\n  }\n}\n`\n\nexport const PUBLIC_PROFILE_QUERY = gql`\nquery publicProfile($username: String!){\n  publicProfile(username: $username) {\n    ...userInfo\n  }\n}\n${USER_INFO}`\n","import React from 'react'\nimport classes from \"./Loader.module.css\"\n\nconst Loader = ({ full, background }) => {\n  return (\n    <div className={background ? classes.background : ''}>\n      <div className={full ? classes.full : ''}>\n        <div className={classes.loaderContainer}>\n          <div className={classes.yellow}></div>\n          <div className={classes.red}></div>\n          <div className={classes.blue}></div>\n          <div className={classes.violet}></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Loader\n","import React, { Fragment } from 'react'\n\nconst Pagination = ({ page, pageSize, setPage, total }) => {\n  const controls = Array(Math.ceil(total / pageSize)).fill(0)\n  const lowerLimit = ((page - 1) * pageSize) + 1\n  const upperLimit = lowerLimit + pageSize - 1\n  return (\n    <div>\n      {\n        controls.length > 1 ?\n          <Fragment>\n            <div>\n              Showing <strong>{lowerLimit} - {upperLimit <= total ? upperLimit : total}</strong> of {total}\n            </div>\n            <button disabled={page === 1} onClick={() => setPage(page - 1)} className={`mr-2 btn btn-warning btn-raised`}> Previous </button>\n            {\n              controls.map((_control, index) => {\n                return <button onClick={() => setPage(index + 1)} className={`btn ${index + 1 === page ? `btn-raised btn-success` : `btn-outline-success`}`} key={'control' + index}>{index + 1}</button>\n              })\n            }\n            <button disabled={page === controls.length} onClick={() => setPage(page + 1)} className={`ml-2 btn btn-warning btn-raised`}>Next</button>\n          </Fragment>\n          : ''\n      }\n\n    </div>\n  )\n}\n\nexport default Pagination\n","import { POST_DATA } from \"./fragments\";\n\nconst { gql } = require(\"@apollo/client\")\n\nexport const POST_ADDED = gql`\nsubscription {\n  postAdded {\n   ...postData\n  }\n}\n${POST_DATA}\n`;","import React, { useEffect, useState } from 'react'\nimport Posts from '../Components/Posts'\nimport { GET_POSTS_QUERY, TOTAL_POSTS } from '../graphql/queries'\nimport { useQuery, useSubscription } from '@apollo/client'\nimport Loader from '../Components/Loader'\nimport { toast } from 'react-toastify'\nimport Pagination from '../Components/Pagination'\nimport { POST_ADDED } from '../graphql/subscriptions'\nconst Home = () => {\n  const [page, setPage] = useState(1)\n  const pageSize = 8\n  useSubscription(POST_ADDED, {\n    onSubscriptionData: ({ client: { cache }, subscriptionData: { data } }) => {\n      // cache.reset()\n      refetchTotalPosts()\n      refetchPosts({\n        variables: page,\n        pageSize\n      })\n      // if (data && data.postAdded) {\n\n      //   toast.info('Update: New Post')\n      // }\n    }\n  })\n  const { data: totalPostsQueryData, refetch: refetchTotalPosts } = useQuery(TOTAL_POSTS)\n  const { data, error, loading, refetch: refetchPosts } = useQuery(GET_POSTS_QUERY, {\n    variables: {\n      page,\n      pageSize\n    }\n  });\n  useEffect(() => {\n    if (error) {\n      toast.error(error.message)\n    }\n  }, [error])\n  return (\n    <div>\n      <h1>Home</h1>\n      {\n        totalPostsQueryData ? <Pagination total={totalPostsQueryData.totalPosts} page={page} pageSize={pageSize} setPage={setPage} /> : ''\n      }\n\n      {\n        loading\n          ? <Loader />\n          : data ? <Posts posts={data.allPosts}></Posts> : ''\n      }\n    </div >\n  )\n}\n\nexport default Home\n","import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAnN8yiImo8V6jCWBz5V5EXdkDujjI9OEo\",\n  authDomain: \"gql-react-node-udemy.firebaseapp.com\",\n  // databaseURL: \"https://gql-react-node-udemy.firebaseio.com\",\n  projectId: \"gql-react-node-udemy\",\n  storageBucket: \"gql-react-node-udemy.appspot.com\",\n  // messagingSenderId: \"660400582483\",\n  appId: \"1:660400582483:web:154b9c0912e81847467ba6\",\n  measurementId: \"G-BYEN4PKHEH\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\nexport default firebase;\nexport const auth = firebase.auth();\nexport const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n","import React, { useReducer, createContext, useEffect, useState } from 'react';\nimport { auth } from '../firebase';\nimport Loader from '../Components/Loader';\n\n// reducer\nconst firebaseReducer = (state, action) => {\n  switch (action.type) {\n    case \"LOGGED_IN_USER\":\n      return { ...state, user: action.payload };\n    default: return state;\n  }\n}\n//state\nconst initialState = {\n  user: null\n}\n// create context\nconst AuthContext = createContext();\n\n// context provider\nconst AuthProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [state, dispatch] = useReducer(firebaseReducer, initialState);\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async user => {\n      if (user) {\n        const idTokenResult = await user.getIdTokenResult();\n        dispatch({\n          type: 'LOGGED_IN_USER',\n          payload: { email: user.email, token: idTokenResult.token }\n        });\n        setLoading(false);\n      } else {\n        dispatch({\n          type: 'LOGGED_IN_USER',\n          payload: null\n        });\n        setLoading(false);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  const value = { state, dispatch };\n  return <AuthContext.Provider value={value}>{loading ? <Loader full background/>: children}</AuthContext.Provider>\n}\n// export\nexport { AuthProvider, AuthContext };","import React, { Fragment, useState } from 'react'\nimport { useHistory } from 'react-router';\n\nconst Search = () => {\n  const [keyword, setKeyword] = useState('');\n  const history = useHistory();\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    history.push(`/search/${keyword}`)\n  }\n  return (\n    <Fragment>\n      <form className=\"form-inline my-2 my-lg-0\" onSubmit={handleSubmit}>\n        <input\n          value={keyword}\n          onChange={(e)=>setKeyword(e.target.value)}\n          className=\"form-control mr-sm-2 bg-light\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n        <button className=\"btn btn-outline-light my-2 my-sm-0\" type=\"submit\">Search</button>\n      </form>\n    </Fragment>\n  )\n}\n\nexport default Search\n","import React, { useContext } from 'react'\nimport { Link, NavLink, useHistory } from 'react-router-dom'\nimport { AuthContext } from '../context/AuthContext';\nimport { auth } from '../firebase';\nimport Search from './Search';\n\n\nconst Navbar = () => {\n  const { state, dispatch } = useContext(AuthContext);\n  const history = useHistory();\n  const { user } = state;\n  const logout = () => {\n    auth.signOut();\n    dispatch({\n      type: 'LOGGED_IN_USER',\n      payload: null\n    });\n    history.push('/login');\n  }\n  return (\n    <React.Fragment>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-success\">\n        <Link className=\"navbar-brand text-white\" to={process.env.PUBLIC_URL + \"/\"}>\n          My App\n        </Link>\n        <button className=\"navbar-toggler text-white\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon text-white\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"nav nav-tabs navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link text-white\" activeClassName=\"active\" to={process.env.PUBLIC_URL + \"/users\"}>Users <span className=\"sr-only\">(current)</span></NavLink>\n            </li>\n            {\n              user\n                ? <React.Fragment>\n\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link text-white\" activeClassName=\"active\" to={process.env.PUBLIC_URL + \"/dashboard\"}>Dashboard <span className=\"sr-only\">(current)</span></NavLink>\n                  </li>\n                  <li className=\"nav-item float-right\">\n                    <span style={{ 'cursor': 'pointer' }} className=\"nav-link text-white\" onClick={logout}> <span className=\"sr-only\">(current)</span>\n                    Logout\n                  </span>\n                  </li>\n                </React.Fragment>\n                : <React.Fragment>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link text-white\" activeClassName=\"active\" to={process.env.PUBLIC_URL + \"/login\"}>Login <span className=\"sr-only\">(current)</span></NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink className=\"nav-link text-white\" activeClassName=\"active\" to={process.env.PUBLIC_URL + \"/register\"}>Register <span className=\"sr-only\">(current)</span></NavLink>\n                  </li>\n                </React.Fragment>\n            }\n\n          </ul>\n          <div className=\"ml-auto\">\n            <Search></Search>\n          </div>\n        </div>\n      </nav>\n    </React.Fragment>\n\n  )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst AuthForm = ({\n  handleSubmit,\n  email = '',\n  setEmail,\n  password = '',\n  setPassword,\n  loading,\n  showPassword = false,\n  submitLabel = 'Submit',\n  hideEmail = false,\n  children\n}) => {\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        {\n          !hideEmail\n\n            ? <div className=\"form-group\">\n              <label htmlFor=\"email\">Enter Email Address</label>\n              <input id=\"email\" type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={loading}\n                className=\"form-control\" />\n            </div>\n            : \"\"\n        }\n        {\n          showPassword\n            ? <div className=\"form-group\">\n              <label htmlFor=\"pasword\">Enter Password</label>\n              <input id=\"password\" type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                disabled={loading}\n                className=\"form-control\" />\n            </div>\n            : ''\n\n        }\n        <button disabled={loading || (!hideEmail && !email) || (showPassword && !password)} className=\"btn btn-outline-success \">\n          {!loading ? submitLabel : \"Please Wait...\"}\n        </button>\n        {children}\n      </form>\n    </div>\n  )\n}\n\nexport default AuthForm\n","import React, { useState } from 'react'\nimport { auth } from '../../firebase';\nimport { toast } from 'react-toastify';\nimport AuthForm from '../../Components/forms/AuthForm';\nimport Loader from '../../Components/Loader';\n\n\nconst Register = () => {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [done, setDone] = useState(false);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    const config = {\n      url: process.env.REACT_APP_COMPLETE_REGISTRATION_URL,\n      handleCodeInApp: true\n    }\n    await auth.sendSignInLinkToEmail(email, config);\n    setLoading(false);\n    //show toast\n    toast.success(\"Please check your inbox for confirmation email!\")\n    // save user email in localstorage\n    window.localStorage.setItem('emailFromRegistration', email);\n    setEmail('');\n    setDone(true);\n  }\n  return (\n    <div className=\"p-5\">\n      <h4>Register</h4>\n      {loading\n        ? <Loader />\n        : done\n          ? <div className=\"alert alert-success\" role=\"alert\">\n            Check your email for completing Registration\n          </div>\n          : <AuthForm {...{ email, setEmail, loading, handleSubmit, submitLabel: 'Proceed' }} />}\n\n    </div>\n  )\n}\n\nexport default Register\n","const { gql } = require(\"@apollo/client\");\nconst { USER_INFO, POST_DATA } = require(\"./fragments\");\n\nexport const USER_CREATE = gql`\nmutation {\n  userCreate {\n    username\n  }\n}\n`;\n\nexport const PROFILE_UPDATE = gql`\nmutation userUpdate($input:UserUpdateInput!){\n  userUpdate(input: $input){\n    # using GQL fragment instead of directly specifying fields\n    ...userInfo\n  }\n}\n  ${USER_INFO}\n`\n\nexport const POST_CREATE = gql`\nmutation postCreate($input: PostCreateUpdateInput!) {\n  postCreate(input: $input) {\n   ...postData\n  }\n}\n${POST_DATA}\n`\nexport const UPDATE_POST = gql`\nmutation postUpdate($_id:String!, $input:PostCreateUpdateInput!){\n  postUpdate(_id: $_id, input: $input) {\n    ...postData\n  }\n}\n${POST_DATA}\n`;\n\n\nexport const DELETE_POST = gql`\nmutation postDelete($_id: String!){\n  postDelete(_id:$_id){\n    _id\n  }\n}\n\n`\n\n\n","import React, { useState, useContext, Fragment } from 'react'\nimport { useHistory } from 'react-router';\nimport { AuthContext } from '../../context/AuthContext';\nimport { auth, googleAuthProvider } from '../../firebase';\nimport { toast } from 'react-toastify';\nimport { useMutation } from '@apollo/client';\nimport AuthForm from '../../Components/forms/AuthForm';\nimport Loader from '../../Components/Loader';\nimport { Link } from 'react-router-dom';\nimport { USER_CREATE } from '../../graphql/mutations';\n\nconst Login = () => {\n  const [createUser] = useMutation(USER_CREATE);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const { dispatch } = useContext(AuthContext);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const { user } = await auth.signInWithEmailAndPassword(email, password);\n      const idTokenResult = await user.getIdTokenResult();\n      dispatch({\n        type: 'LOGGED_IN_USER',\n        payload: { email: user.email, token: idTokenResult.token }\n      });\n      // send user info to server, update/create user\n      await createUser();\n      history.push('/dashboard');\n    } catch (error) {\n      toast.error(error.message);\n      setLoading(false);\n    }\n  }\n  const loginWithGoogle = async () => {\n    try {\n      setLoading(true)\n      const { user } = await auth.signInWithPopup(googleAuthProvider);\n      const idTokenResult = await user.getIdTokenResult();\n      dispatch({\n        type: 'LOGGED_IN_USER',\n        payload: { email: user.email, token: idTokenResult.token }\n      });\n      // send user info to server, update/create user\n      await createUser();\n      history.push('/dashboard');\n    } catch (error) {\n      toast.error(error.message);\n      setLoading(false);\n    }\n  }\n  return (\n    <div className=\"p-5\">\n      <h4>Login</h4>\n\n      {loading\n        ? <Loader full background/>\n        : <Fragment>\n          <button className=\"btn  btn-outline-danger mt-5\" onClick={loginWithGoogle}>\n            Login with Google\n          </button>\n          <div>Or</div>\n          <AuthForm {...{ email, password, setEmail, setPassword, loading, handleSubmit, submitLabel: 'Login using email & password', showPassword: true }} >\n            <Link to={process.env.PUBLIC_URL + \"/forgot-password\"}>\n              <button className=\"btn btn-outline-secondary\">Forgot Password</button>\n            </Link>\n          </AuthForm>\n        </Fragment>\n      }\n\n    </div>\n  )\n}\n\nexport default Login\n","import React, { useState, useEffect, useContext } from 'react'\nimport { auth } from '../../firebase';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router';\nimport { AuthContext } from '../../context/AuthContext';\nimport { useMutation } from '@apollo/client';\nimport AuthForm from '../../Components/forms/AuthForm';\nimport Loader from '../../Components/Loader';\nimport { USER_CREATE } from '../../graphql/mutations';\n\nconst CompleteRegistration = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const { dispatch } = useContext(AuthContext);\n  const [createUser] = useMutation(USER_CREATE);\n\n  useEffect(() => {\n    setEmail(window.localStorage.getItem('emailFromRegistration'))\n  }, [history])\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    if (!email || !password) {\n      toast.error(\"Email & Password is required\");\n      return;\n    }\n    try {\n      const result = await auth.signInWithEmailLink(email, window.location.href);\n      if (result.user.emailVerified) {\n        window.localStorage.removeItem('emailFromRegistration');\n        let user = auth.currentUser;\n        await user.updatePassword(password);\n        const idTokenResult = await user.getIdTokenResult();\n        dispatch({\n          type: 'LOGGED_IN_USER',\n          payload: { email: user.email, token: idTokenResult.token }\n        });\n        // update the user in our DB\n        await createUser();\n        history.push('/dashboard')\n\n      } else {\n        toast.error(\"Email not verified\");\n      }\n    } catch (error) {\n      console.log('Error in registration completion', error.message);\n      setLoading(false);\n      toast.error(error.message);\n    }\n  }\n  return (\n    <div className=\"p-5\">\n      <h4>Complete Registration</h4>\n\n      {loading ? <Loader/> :<AuthForm {...{ email, password, setEmail, setPassword, loading, handleSubmit, submitLabel: 'Complete Registration', showPassword: true }}/>}\n\n    </div>\n  )\n}\n\nexport default CompleteRegistration\n","import React, { useState } from 'react'\nimport Loader from '../../Components/Loader';\nimport AuthForm from '../../Components/forms/AuthForm';\nimport { auth } from '../../firebase';\nimport { toast } from 'react-toastify';\n\nconst ForgotPassword = () => {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [done, setDone] = useState(false);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    const config = {\n      url: process.env.REACT_APP_CHANGE_PASSWORD_REDIRECT_URL\n    }\n    await auth.sendPasswordResetEmail(email, config);\n    setLoading(false);\n    //show toast\n    toast.success(\"Please check your inbox for password reset email!\")\n    setEmail('');\n    setDone(true);\n  }\n  return (\n    <div className=\"p-5\">\n      <h4>Forgot Password</h4>\n      {loading\n        ? <Loader />\n        : done\n          ? <div className=\"alert alert-success\" role=\"alert\">\n            Check your email for Password Reset Link\n          </div>\n          : <AuthForm {...{ email, setEmail, loading, handleSubmit, submitLabel: 'Proceed' }} />}\n    </div>\n  )\n}\n\nexport default ForgotPassword\n","import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router'\n\nconst LoadingWithRedirect = ({ countFrom, path }) => {\n  const history = useHistory();\n  const [count, setCount] = useState(countFrom)\n  useEffect(() => {\n    if (count === 0) {\n      history.push(path)\n    } else {\n\n      setTimeout(() => {\n        console.log('executed at', new Date())\n        setCount(count - 1)\n      }, 1000)\n    }\n\n  }, [count, history, path])\n  return (\n    <div className=\"p-5\">\n      Redirecting you in {count} seconds ...\n    </div>\n  )\n}\n\nexport default LoadingWithRedirect\n","import React, {  useContext, Fragment } from 'react'\nimport { AuthContext } from '../context/AuthContext'\nimport { Route } from 'react-router';\nimport LoadingWithRedirect from './LoadingWithRedirect';\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  const { state } = useContext(AuthContext);\n  const { user } = state;\n  return (\n    <Fragment>\n      {user\n        ? <Route {...rest}>{children}</Route>\n        : <LoadingWithRedirect path='/login' countFrom='5'/>}\n    </Fragment>\n  )\n}\n\nexport default PrivateRoute\n","import React, { Fragment } from 'react'\n\nconst ProfileForm = ({handleSubmit, profile, setProfile, loading, profileLoading}) => {\n  return (\n    <Fragment>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input id=\"username\" type=\"text\"\n            value={profile.username}\n            onChange={(e) => setProfile({ ...profile, username: e.target.value })}\n            disabled={loading || profileLoading}\n            className=\"form-control text-white\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Name</label>\n          <input id=\"name\" type=\"text\"\n            value={profile.name}\n            onChange={(e) => setProfile({ ...profile, name: e.target.value })}\n            disabled={loading || profileLoading}\n            className=\"form-control text-white\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email</label>\n          <input id=\"email\" type=\"text\"\n            value={profile.email}\n            onChange={(e) => setProfile({ ...profile, email: e.target.value })}\n            disabled\n            className=\"form-control\" />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"about\">About</label>\n          <textarea id=\"about\" type=\"text\"\n            value={profile.about}\n            onChange={(e) => setProfile({ ...profile, about: e.target.value })}\n            disabled={loading || profileLoading}\n            className=\"form-control text-white\"\n            rows=\"5\"\n          />\n        </div>\n        <button disabled={loading || profileLoading} className=\"btn btn-outline-success \">\n          {!loading ? 'Update' : \"Please Wait...\"}\n        </button>\n      </form>\n    </Fragment>\n  )\n}\n\nexport default ProfileForm\n","import React, { Fragment } from 'react'\n\nconst ImageManager = ({ images, processingImage, resizeAndUploadHandler, deleteImageHandler}) => {\n  return (\n    <Fragment>\n      <div className=\"form-group\">\n        {\n          processingImage\n            ? \"Please Wait...\"\n            : <label htmlFor=\"image\">\n              <span className=\"btn btn-default btn-raised\">Upload Image</span>\n              <input\n                hidden\n                type=\"file\"\n                id=\"image\"\n                accept=\"image/*\"\n                onChange={resizeAndUploadHandler}\n                placeholder=\"upload new image\"\n                className=\"form-control\" />\n            </label>\n        }\n      </div>\n      <div className=\"row\">\n        {\n          images.map(\n            image =>\n              <div className=\"col-md-3\" key={image.public_id}>\n                <div className=\"overlay-container\">\n                  <img style={{ height: '100px' }} src={image.url} alt={image.public_id} className=\"img-thumbnail float-right\"></img>\n                  <div className=\"overlay\">\n                    <div className=\"overlay-contents\">\n                      <button style={{ cursor: image.url.includes('placeholder') ? 'not-allowed' : 'pointer' }} disabled={image.url.includes('placeholder')} onClick={() => deleteImageHandler(image.public_id)} type=\"button\" className=\"btn btn-raised btn-success\">Delete</button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n          )\n        }\n      </div>\n    </Fragment>\n  )\n}\n\nexport default ImageManager\n","import axios from 'axios'\nimport { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\n// custom hook\nexport const useAuthHttp = () => {\n  const { state } = useContext(AuthContext)\n  return axios.create({\n    baseURL: process.env.REACT_APP_SERVER_URL,\n    headers: { 'authtoken': state.user.token }\n  });\n }","import React, { useMemo, useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { PROFILE_QUERY, ALL_USERS_QUERY, GET_POSTS_QUERY } from '../graphql/queries'\nimport Loader from '../Components/Loader'\nimport { PROFILE_UPDATE } from '../graphql/mutations'\nimport Resizer from 'react-image-file-resizer'\nimport omitDeep from 'omit-deep-lodash'\nimport ProfileForm from '../Components/forms/ProfileForm'\nimport ImageManager from '../Components/ImageManager'\nimport { useAuthHttp } from '../util/http'\n\nconst Profile = () => {\n  const http = useAuthHttp();\n  const [profile, setProfile] = useState({\n    name: '',\n    username: '',\n    email: '',\n    about: '',\n    images: []\n  })\n  const [loading, setLoading] = useState(false)\n  const [processingImage, setProcessingImage] = useState(false)\n  const { data, loading: profileLoading, error: profileLoadError } = useQuery(PROFILE_QUERY)\n  const [updateProfile] = useMutation(PROFILE_UPDATE, {\n    refetchQueries: [{ query: PROFILE_QUERY }, { query: ALL_USERS_QUERY }, { query: GET_POSTS_QUERY }]\n  })\n  useEffect(() => {\n    if (profileLoadError) {\n      toast.error(profileLoadError.message)\n    }\n  }, [profileLoadError])\n  useMemo(() => {\n    if (data && data.profile) {\n      const modified = omitDeep(data, ['__typename'])\n      setProfile(\n        {\n          name: modified.profile.name,\n          username: modified.profile.username,\n          email: modified.profile.email,\n          about: modified.profile.about,\n          images: modified.profile.images\n        }\n      )\n    }\n  }, [data])\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n    try {\n      await updateProfile(\n        {\n          variables: { input: { username: profile.username, name: profile.name, about: profile.about } }\n        }\n      )\n      toast.success('Profile Updated')\n      setLoading(false)\n    } catch (error) {\n      toast.error(error.message)\n      setLoading(false)\n    }\n  }\n  const resizeAndUploadHandler = (event) => {\n    setProcessingImage(true)\n    var fileInput = false\n    if (event.target.files[0]) {\n      fileInput = true\n    }\n    if (fileInput) {\n      Resizer.imageFileResizer(\n        event.target.files[0],\n        300,\n        300,\n        'JPEG',\n        100,\n        0,\n        async (output) => {\n          try {\n            const { data } = await http.post(`${process.env.REACT_APP_SERVER_URL}/uploadImages`,\n              { image: output })\n            const updatedImages = [...profile.images, data];\n            // update in DB\n            await updateProfile(\n              {\n                variables: { input: { images: updatedImages } }\n              }\n            )\n            // update on UI\n            setProfile({ ...profile, images: updatedImages })\n            toast.info('Uploaded')\n            setProcessingImage(false)\n          } catch (error) {\n            toast.error(error.message)\n            setProcessingImage(false)\n          }\n        },\n        'base64'\n      );\n    }\n  }\n\n  const deleteImageHandler = async (id) => {\n    setProcessingImage(true)\n    try {\n      const { data } = await http.post(`${process.env.REACT_APP_SERVER_URL}/removeImage`,\n        { public_id: id })\n      if (data.success) {\n        const filteredImages = profile.images.filter(image => {\n          return image.public_id !== id;\n        })\n        // update images in DB\n        await updateProfile(\n          {\n            variables: { input: { images: filteredImages } }\n          }\n        )\n        // update images on UI\n        setProfile({ ...profile, images: filteredImages })\n        toast.info('Deleted')\n      } else {\n        toast.error(data.error.message)\n      }\n      setProcessingImage(false)\n    } catch (error) {\n      toast.error(error.message)\n      setProcessingImage(false)\n    }\n  }\n\n  return (\n    <div>\n      {\n        profileLoading\n          ? <Loader /> :\n          <div className=\"row jumbotron\">\n            <div className=\"col-md-6 jumbotron bg-dark text-white border border-success\">\n              <ProfileForm {...{ handleSubmit, profile, setProfile, loading, profileLoading }} />\n            </div>\n            <div className=\"col-md-6 jumbotron bg-light\">\n              <ImageManager {...{ images: profile.images, processingImage, resizeAndUploadHandler, deleteImageHandler }} />\n            </div>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default Profile\n","import React, { useState } from 'react'\nimport AuthForm from '../Components/forms/AuthForm';\nimport { auth } from '../firebase';\nimport { toast } from 'react-toastify';\n\nconst UpdatePassword = () => {\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await auth.currentUser.updatePassword(password);\n      setLoading(false);\n      toast.success('Password Updated');\n    } catch (error) {\n      toast.error(error.message)\n    }\n\n\n  }\n  return (\n    <div>\n      <h4>\n        Update Password\n      </h4>\n      <AuthForm {...{password, setPassword, loading, handleSubmit, submitLabel: 'Update Password', showPassword: true, hideEmail: true }} >\n      </AuthForm>\n    </div>\n  )\n}\n\nexport default UpdatePassword\n","import React, { useEffect, useState, Fragment } from 'react'\nimport { GET_CURRENT_USER_POSTS_QUERY, TOTAL_USER_POSTS } from '../graphql/queries';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { toast } from 'react-toastify';\nimport Loader from '../Components/Loader';\nimport Posts from '../Components/Posts';\nimport { Link } from 'react-router-dom';\nimport { DELETE_POST } from '../graphql/mutations';\nimport Pagination from '../Components/Pagination';\n\nconst UserPosts = () => {\n  const [page, setPage] = useState(1)\n  const pageSize = 6\n  const { data: totalPostsByUserQueryData } = useQuery(TOTAL_USER_POSTS);\n\n  const { data, error, loading } = useQuery(GET_CURRENT_USER_POSTS_QUERY, {\n    variables: {\n      page, pageSize\n    }\n  });\n  const [deletePost] = useMutation(DELETE_POST, {\n    update: (cache) => {\n      cache.reset()\n    },\n    //  refetchQueries: [{query: TOTAL_POSTS}, {query: GET_POSTS_QUERY}, {query: GET_CURRENT_USER_POSTS_QUERY}]\n  })\n  useEffect(() => {\n    if (error) {\n      toast.error(error.message)\n    }\n  }, [error])\n  const deletePostHandler = async (_id) => {\n    try {\n      await deletePost({\n        variables: {\n          _id: _id\n        }\n      })\n      toast.success('Deleted');\n    } catch (error) {\n      toast.error(error.message)\n    }\n  }\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Link to={process.env.PUBLIC_URL + \"/create-post\"} className=\"btn btn-raised btn-success-outline float-right\">Create New Post</Link>\n        </div>\n      </div>\n      {\n        totalPostsByUserQueryData ? <Pagination total={totalPostsByUserQueryData.totalPostsByUser} page={page} pageSize={pageSize} setPage={setPage} /> : ''\n      }\n      {\n        loading\n          ? <Loader />\n          : <Fragment>\n\n            {\n              data\n                ? <Posts colSize={4} showAuthor={false} posts={data.postsByCurrentUser} deletePostHandler={deletePostHandler} editable></Posts>\n                : ''\n            }\n          </Fragment>\n      }\n    </div>\n  )\n}\n\nexport default UserPosts\n","import React from 'react'\nimport { NavLink, Switch, Route } from 'react-router-dom'\nimport Profile from './Profile'\nimport UpdatePassword from './UpdatePassword'\nimport UserPosts from './UserPosts'\n\nconst Dashboard = () => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-3\">\n        <div className=\"list-group\">\n          <NavLink className=\"text-center btn-lg btn-link btn-success\" activeClassName=\"active\" to={`${process.env.PUBLIC_URL}/dashboard`} exact>Profile</NavLink>\n          <NavLink className=\"text-center btn-lg btn-link btn-success\" activeClassName=\"active\" to={`${process.env.PUBLIC_URL}/dashboard/update-password`}>Update Password</NavLink>\n          <NavLink className=\"text-center btn-lg btn-link btn-success\" activeClassName=\"active\" to={`${process.env.PUBLIC_URL}/dashboard/user-posts`}>Posts</NavLink>\n        </div>\n      </div>\n      <div className=\"col-9\">\n        <div className=\"tab-content\">\n          <Switch>\n            <Route path={`${process.env.PUBLIC_URL}/dashboard/update-password`}>\n              <UpdatePassword />\n            </Route>\n            <Route path={`${process.env.PUBLIC_URL}/dashboard/user-posts`}>\n              <UserPosts/>\n            </Route>\n            <Route path={`${process.env.PUBLIC_URL}/dashboard`}>\n              <Profile />\n            </Route>\n          </Switch>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n","import React, { useContext, useEffect } from 'react'\nimport { AuthContext } from '../context/AuthContext'\nimport { useHistory, Route } from 'react-router'\n\nconst PublicRoute = ({children, ...rest}) => {\n  const { state } = useContext(AuthContext)\n  const history = useHistory()\n  useEffect(() => {\n    if (state.user) {\n      history.push('/dashboard')\n    }\n  }, [state.user, history])\n  return (\n    <div>\n      <Route {...rest}>{children}</Route>\n    </div>\n  )\n}\n\n\nexport default PublicRoute\n","import React from 'react'\n\nconst UserCard = ({ user }) => {\n  const { username, about, images } = user\n  const [defaultImage, firstImage] = images\n  return (\n    <div className=\"card text-center\" style={{height: '100%', width: '200px'}}>\n      <div className=\"card-body\">\n        <img className=\"img-card-top\" src={firstImage ? firstImage.url: defaultImage.url} alt=\"\" style={{height: '100px', width: '100px'}}/>\n\n        <h4 className=\"text-primary\">\n          @{username}\n        </h4>\n        <hr />\n        <small>{about}</small>\n      </div>\n    </div>\n  )\n}\n\nexport default UserCard\n","import React, { useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { ALL_USERS_QUERY } from '../graphql/queries'\nimport { toast } from 'react-toastify'\nimport Loader from '../Components/Loader'\nimport UserCard from '../Components/UserCard'\nimport { Link } from 'react-router-dom'\n\nconst Users = () => {\n  const { data, loading, error } = useQuery(ALL_USERS_QUERY)\n  useEffect(() => {\n    if (error) {\n      toast.error(error.message)\n    }\n  }, [error])\n  return (\n    <div className=\"row\">\n      {\n        loading ? <Loader /> : ''\n      }\n      {\n        data && data.allUsers ? data.allUsers.map(user => {\n          return <div className=\"col-md-2\" key={`user-` + user._id}>\n            <Link to={process.env.PUBLIC_URL + `/users/${user.username}`}>\n              <UserCard user={user} ></UserCard>\n            </Link>\n          </div>\n        }) : ''\n      }\n    </div>\n  )\n}\n\nexport default Users\n","import React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport { PUBLIC_PROFILE_QUERY } from '../graphql/queries'\nimport { toast } from 'react-toastify'\nimport Loader from '../Components/Loader'\nimport { useQuery } from '@apollo/client'\n\nconst SingleUser = () => {\n  const { username } = useParams()\n  const { data, loading, error } = useQuery(PUBLIC_PROFILE_QUERY, { variables: { username: username } })\n  useEffect(() => {\n    if (error) {\n      toast.error(error.message)\n    }\n  }, [error])\n  return (\n    <div>\n      {\n        loading ? <Loader /> : ''\n      }\n      {\n        data\n          ? <div className=\"jumbotron\">\n            <h1 className=\"display-4\">{data.publicProfile.name}</h1>\n            <p className=\"lead\">@{data.publicProfile.username}</p>\n            <hr className=\"my-4\" />\n            <p>{data.publicProfile.about}</p>\n            <h4>Photos of {data.publicProfile.name}</h4>\n            {\n              data.publicProfile.images.map(({ url }) => <img style={{height: '100px', width: '100px'}} className=\"img-thumbnail\" alt=\"\" src={url}/>)\n            }\n          </div>\n          : ''\n      }\n    </div>\n  )\n}\n\n\nexport default SingleUser\n","import React, { Fragment, useState } from 'react'\nimport FileResizer from 'react-image-file-resizer'\nimport { useAuthHttp } from '../../util/http';\nimport { toast } from 'react-toastify';\n\nconst CreateUpdatePostForm = ({ title, content, image, setTitle, setContent, setImage, handleSubmit, loading}) => {\n  const [processingImage, setProcessingImage] = useState(false)\n  const http = useAuthHttp()\n  const handleImageUpload = (event) => {\n    setProcessingImage(true)\n    var fileInput = false\n    if (event.target.files[0]) {\n      fileInput = true\n    }\n    if (fileInput) {\n      FileResizer.imageFileResizer(\n        event.target.files[0],\n        300,\n        200,\n        'JPEG',\n        100,\n        0,\n        async (output) => {\n          try {\n            const { data } = await http.post(`${process.env.REACT_APP_SERVER_URL}/uploadImages`,\n              { image: output })\n            setImage(data)\n            toast.info('Uploaded')\n            setProcessingImage(false)\n          } catch (error) {\n            toast.error(error.message)\n            setProcessingImage(false)\n          }\n        },\n        'base64'\n      );\n    }\n  }\n  const deleteImageHandler = async (id) => {\n    setProcessingImage(true)\n    try {\n      const { data } = await http.post(`${process.env.REACT_APP_SERVER_URL}/removeImage`,\n        { public_id: id })\n      if (data.success) {\n        console.log('setting image to null')\n        setImage(null)\n        toast.info('Deleted')\n      } else {\n        // toast.error(data.error.message)\n        // even if we are unable to delete it from cloudinary we can unlink it from our db\n        setImage(null)\n      }\n      setProcessingImage(false)\n    } catch (error) {\n      toast.error(error.message)\n      setProcessingImage(false)\n    }\n  }\n  return (\n    <Fragment>\n      {processingImage\n        ? \"Please Wait...\"\n        : image\n          ? <div className=\"row\">\n            <div className=\"col-md-4\">\n              <div className=\"overlay-container\">\n                <img style={{ height: '300px', width: '100%' }} src={image.url} alt={image.public_id} className=\"img-thumbnail float-right\"></img>\n                <div className=\"overlay\">\n                  <div className=\"overlay-contents\">\n                    <button onClick={() => deleteImageHandler(image.public_id)} type=\"button\" className=\"btn btn-raised btn-success\">Delete</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          : <label htmlFor=\"upload\">\n            <span className=\"btn btn-default btn-raised\">Upload Image</span>\n            <input type=\"file\" hidden onChange={handleImageUpload} id=\"upload\" />\n          </label>\n      }\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"title\">Title</label>\n          <input type=\"text\" placeholder=\"Enter Title\" className=\"form-control\" id=\"title\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"content\">Content</label>\n          <textarea rows=\"3\" placeholder=\"Write Something Here\" className=\"form-control\" id=\"content\"\n            value={content}\n            onChange={e => setContent(e.target.value)}\n          />\n        </div>\n        <button disabled={!title || !content || loading} className=\"btn btn-raised btn-success\">Submit</button>\n      </form>\n    </Fragment>\n  )\n}\n\nexport default CreateUpdatePostForm\n","import React, { useState } from 'react'\nimport CreateUpdatePostForm from '../Components/forms/CreateUpdatePostForm'\nimport { useMutation } from '@apollo/client';\nimport { POST_CREATE } from '../graphql/mutations';\nimport Loader from '../Components/Loader';\nimport { toast } from 'react-toastify';\n// import { GET_POSTS_QUERY, GET_CURRENT_USER_POSTS_QUERY, TOTAL_POSTS } from '../graphql/queries';\n// import { useHistory } from 'react-router';\n\nconst CreatePost = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [image, setImage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  // const history = useHistory();\n\n  const [createPost] = useMutation(POST_CREATE, {\n    update: (cache) => {\n      //cache.reset()\n    },\n    // refetchQueries: [\n    //   { query: GET_POSTS_QUERY },\n    //   { query:TOTAL_POSTS },\n    //   { query: GET_CURRENT_USER_POSTS_QUERY }]\n    // update: (cache, { data: { postCreate } }) => {\n    //   const {postsByCurrentUser} = cache.readQuery({ query: GET_CURRENT_USER_POSTS_QUERY })\n    //   const {allPosts} = cache.readQuery({ query: GET_POSTS_QUERY })\n    //   console.log(\"==============>\", postsByCurrentUser, allPosts)\n    //   cache.writeQuery({\n    //     query: GET_CURRENT_USER_POSTS_QUERY,\n    //     data: {\n    //       postsByCurrentUser: [postCreate, ...postsByCurrentUser]\n    //     }\n    //   })\n    //   cache.writeQuery({\n    //     query: GET_POSTS_QUERY,\n    //     data: {\n    //       allPosts: [postCreate, ...allPosts]\n    //     }\n    //   })\n    // }\n  });\n  const handleSubmit = async (e) => {\n    setLoading(true)\n    e.preventDefault()\n    try {\n      await createPost({\n        variables: {\n          input: { title, content, image }\n        }\n      })\n      toast.success('Post Created')\n      setLoading(false)\n      setTitle('')\n      setContent('')\n      //history.push('/dashboard/user-posts')\n    } catch (error) {\n      toast.error(error.message)\n      console.log()\n      setLoading(false)\n    }\n\n  }\n  return (\n    <div>\n      {\n        loading ? <Loader /> : <CreateUpdatePostForm {...{ title, setTitle, content, image, setContent, setImage, handleSubmit }} />\n      }\n\n    </div>\n  )\n}\n\nexport default CreatePost\n","import React, { useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { useParams } from 'react-router'\nimport { SINGLE_POST } from '../graphql/queries';\nimport Loader from '../Components/Loader';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst ViewPost = () => {\n  const { _id } = useParams();\n  const { data, loading, error } = useQuery(SINGLE_POST, {\n    variables: {\n      _id: _id\n    }\n  })\n  useEffect(() => {\n    if (error) {\n      toast.error(error.message)\n    }\n  }, [error])\n  return (\n    <div className=\"container\">\n      {\n        loading ? <Loader />\n          : <div className=\"jumbotron\">\n            <img style={{ width: '800px' }} src={data.singlePost.image.url} alt=\"\" />\n            <h1 className=\"m-auto display-4\">{data.singlePost.title}</h1>\n            <p className=\"lead\">By: <Link to={process.env.PUBLIC_URL + `/users/${data.singlePost.postedBy.username}`}>{data.singlePost.postedBy.name}</Link></p>\n            <hr className=\"my-4\" />\n            <p className=\"lead\">\n              {data.singlePost.content}\n            </p>\n          </div>\n      }\n    </div>\n  )\n}\n\nexport default ViewPost\n","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport { useQuery, useMutation } from '@apollo/client';\nimport { SINGLE_POST, GET_CURRENT_USER_POSTS_QUERY, GET_POSTS_QUERY } from '../graphql/queries';\nimport { toast } from 'react-toastify';\nimport Loader from '../Components/Loader';\nimport CreateUpdatePostForm from '../Components/forms/CreateUpdatePostForm';\nimport { UPDATE_POST } from '../graphql/mutations';\nimport omitDeep from 'omit-deep-lodash'\n\n\nconst EditPost = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [image, setImage] = useState(null);\n  const [submitting, setSubmitting] = useState(false)\n\n  const { _id } = useParams()\n  const { data, loading, error } = useQuery(SINGLE_POST, {\n    variables: {\n      _id: _id\n    }\n  })\n  const [updatePost] = useMutation(UPDATE_POST)\n  useEffect(() => {\n    if (error) {\n      toast.error(error.message)\n    }\n    if (data) {\n      console.log('setting initial data....')\n      setTitle(data.singlePost.title)\n      setContent(data.singlePost.content)\n      if (!data.singlePost.image.url.includes('placeholder')) {\n        setImage(data.singlePost.image)\n      }\n    }\n  }, [data, error])\n  const handleSubmit = async (e) => {\n    setSubmitting(true)\n    e.preventDefault()\n    try {\n      await updatePost({\n        variables: {\n          _id,\n          input: {\n            title,\n            content,\n            image: omitDeep(image, ['__typename'])\n          }\n        },\n        refetchQueries: [{ query: GET_CURRENT_USER_POSTS_QUERY }, { query: GET_POSTS_QUERY }]\n      })\n      toast.success('Updated Post')\n      setSubmitting(false)\n    } catch (error) {\n      toast.error(error.message)\n      setSubmitting(false)\n    }\n\n  }\n  return (\n    <div>\n      <h4>Edit Post</h4>\n      {\n        loading || submitting ? <Loader /> : <CreateUpdatePostForm {...{ title, setTitle, content, image, setContent, setImage, handleSubmit }} />\n      }\n    </div>\n  )\n}\n\nexport default EditPost\n","import React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport { useQuery } from '@apollo/client';\nimport { SEARCH_POSTS } from '../graphql/queries';\nimport { toast } from 'react-toastify';\nimport Loader from '../Components/Loader';\nimport Posts from '../Components/Posts';\n\nconst SearchResults = () => {\n  const { keyword } = useParams();\n  const { data, error, loading } = useQuery(SEARCH_POSTS, {\n    variables: {\n      keyword\n    }\n  });\n  useEffect(() => {\n    if (error) {\n      toast.error(error.message)\n    }\n  }, [error])\n  return (\n    <div>\n      Search Results for \"{keyword}\"\n      {\n        loading\n          ? <Loader />\n          : data ? <Posts posts={data.searchPosts}></Posts> : ''\n      }\n    </div>\n  )\n}\n\nexport default SearchResults\n","import React, { useContext } from 'react';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { setContext } from '@apollo/client/link/context';\nimport { Switch, Route } from 'react-router';\nimport Home from './pages/Home';\nimport Navbar from './Components/Navbar';\nimport Register from './pages/auth/Register';\nimport Login from './pages/auth/Login';\nimport CompleteRegistration from './pages/auth/CompleteRegistration';\nimport { ToastContainer } from 'react-toastify';\nimport { AuthContext } from './context/AuthContext';\nimport ForgotPassword from './pages/auth/ForgotPassword';\nimport PrivateRoute from './Components/PrivateRoute';\nimport Dashboard from './pages/Dashboard';\nimport 'react-toastify/dist/ReactToastify.css';\nimport PublicRoute from './Components/PublicRoute';\nimport Users from './pages/Users';\nimport SingleUser from './pages/SingleUser';\nimport CreatePost from './pages/CreatePost';\nimport ViewPost from './pages/ViewPost';\nimport EditPost from './pages/EditPost';\nimport SearchResults from './pages/SearchResults';\n\nfunction App() {\n  const { state } = useContext(AuthContext);\n  const { user } = state;\n\n  const wsLink = new WebSocketLink({\n  uri: `${process.env.REACT_APP_SERVER_WS_URL}/graphql`,\n  options: {\n    reconnect: true,\n    connectionParams: {\n      authtoken: user? user.token : ''\n    }\n  }\n});\n  const httpLink = createHttpLink({\n    uri: `${process.env.REACT_APP_SERVER_URL}/graphql`\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authtoken: user? user.token : ''\n      }\n    }\n  });\n\n  const link = split(\n    // split based on operation type\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    wsLink,\n    authLink.concat(httpLink)\n  );\n\n  const client = new ApolloClient({\n    link,\n    cache: new InMemoryCache()\n  });\n  return (\n    <ApolloProvider client={client}>\n      <React.Fragment>\n        <Navbar></Navbar>\n        <ToastContainer />\n        <div className=\"container-fluid p-5\">\n          <Switch>\n            <PublicRoute exact path={process.env.PUBLIC_URL + \"/login\"}>\n              <Login></Login>\n            </PublicRoute>\n            <PublicRoute exact path={process.env.PUBLIC_URL + \"/register\"}>\n              <Register></Register>\n            </PublicRoute>\n            <PublicRoute exact path={process.env.PUBLIC_URL + \"/complete-register\"}>\n              <CompleteRegistration />\n            </PublicRoute>\n            <PublicRoute exact path={process.env.PUBLIC_URL + \"/forgot-password\"}>\n              <ForgotPassword/>\n            </PublicRoute>\n            <PrivateRoute path={process.env.PUBLIC_URL + \"/dashboard\"}>\n              <Dashboard/>\n            </PrivateRoute>\n            <PrivateRoute path={process.env.PUBLIC_URL + \"/create-post\"}>\n              <CreatePost/>\n            </PrivateRoute>\n            <PrivateRoute path={process.env.PUBLIC_URL + \"/edit-post/:_id\"}>\n              <EditPost/>\n            </PrivateRoute>\n            <Route path={process.env.PUBLIC_URL + \"/users/:username\"}>\n              <SingleUser/>\n            </Route>\n            <Route path={process.env.PUBLIC_URL + \"/users\"}>\n              <Users/>\n            </Route>\n            <Route path={process.env.PUBLIC_URL + \"/posts/:_id\"}>\n              <ViewPost/>\n            </Route>\n            <Route path={process.env.PUBLIC_URL + \"/search/:keyword\"}>\n              <SearchResults/>\n            </Route>\n            <Route path={process.env.PUBLIC_URL + \"/token\"}>\n              {state && state.user && state.user.token}\n            </Route>\n            <Route path={process.env.PUBLIC_URL + \"/\"}>\n              <Home></Home>\n            </Route>\n          </Switch>\n        </div>\n      </React.Fragment>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { AuthProvider } from './context/AuthContext';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <AuthProvider>\n        <App />\n      </AuthProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"full\":\"Loader_full__Rnuvt\",\"background\":\"Loader_background__XKUro\",\"loaderContainer\":\"Loader_loaderContainer__1ehac\",\"bounce\":\"Loader_bounce__2J07n\",\"yellow\":\"Loader_yellow__3CWid\",\"red\":\"Loader_red__2xz5W\",\"blue\":\"Loader_blue__3EGtr\",\"violet\":\"Loader_violet__1zwuB\"};","const { gql } = require(\"@apollo/client\");\n\nexport const USER_INFO = gql`\nfragment userInfo on User {\n  _id\n  name\n  username\n  email\n  about\n  images {\n    url,\n    public_id\n  }\n}\n`\nexport const POST_DATA = gql`\nfragment postData on Post {\n  _id,\n  title,\n  content,\n  postedBy {\n    _id\n    username,\n    name\n  },\n  image {\n    url\n    public_id\n  }\n}\n`"],"sourceRoot":""}